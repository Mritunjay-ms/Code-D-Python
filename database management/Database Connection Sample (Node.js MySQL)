npm install mysql2

const mysql = require('mysql2/promise');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

const JWT_SECRET = 'your_secure_jwt_secret'; // Store this securely in env vars

const pool = mysql.createPool({
  host: 'localhost',
  user: 'your_mysql_username',
  password: 'your_mysql_password',
  database: 'AlumniManagementDB',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
});

// Reusable query function
async function query(sql, params) {
  let connection;
  try {
    connection = await pool.getConnection();
    const [results] = await connection.execute(sql, params);
    return results;
  } catch (err) {
    console.error('Database query error:', err);
    throw err;
  } finally {
    if (connection) connection.release();
  }
}

// Register user securely
async function registerUser(user) {
  const { email, phone, password, name, batchYear, course, currentJob, location } = user;
  const saltRounds = 10;
  const passwordHash = await bcrypt.hash(password, saltRounds);

  const sql = `
    INSERT INTO Alumni (Email, Phone, PasswordHash, Name, BatchYear, Course, CurrentJob, Location)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
  `;
  const params = [email, phone, passwordHash, name, batchYear, course, currentJob, location];
  await query(sql, params);
  return { message: 'User registered successfully' };
}

// Login user and return JWT token
async function loginUser(email, password) {
  const sql = 'SELECT AlumniID, PasswordHash FROM Alumni WHERE Email = ?';
  const results = await query(sql, [email]);
  if (results.length === 0) {
    throw new Error('User not found');
  }

  const user = results[0];
  const isPasswordValid = await bcrypt.compare(password, user.PasswordHash);
  if (!isPasswordValid) {
    throw new Error('Invalid password');
  }

  const token = jwt.sign({ AlumniID: user.AlumniID }, JWT_SECRET, { expiresIn: '1h' });
  return { token };
}

// JWT middleware example for Express.js routes
function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (!token) return res.sendStatus(401);

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
}

module.exports = { registerUser, loginUser, authenticateToken, query, pool };

