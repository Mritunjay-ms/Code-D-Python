Alumni Management (CRUD)
-- Insert new alumni (use hashed password)
INSERT INTO Alumni (Email, Phone, PasswordHash, Name, BatchYear, Course, CurrentJob, Location)
VALUES (?, ?, ?, ?, ?, ?, ?, ?); 
-- params: [email, phone, passwordHash, name, batchYear, course, currentJob, location]

-- Fetch alumni by batch
SELECT * FROM Alumni WHERE BatchYear = ?; 
-- params: [batchYear]

-- Update alumni profile (name, job, location, course)
UPDATE Alumni
SET Name = ?, CurrentJob = ?, Location = ?, Course = ?
WHERE AlumniID = ?;
-- params: [name, currentJob, location, course, alumniId]

-- Delete alumni
DELETE FROM Alumni WHERE AlumniID = ?;
-- params: [alumniId]

Event Handling
-- Create new event
INSERT INTO Events (EventName, Description, EventDate, Location)
VALUES (?, ?, ?, ?);
-- params: [eventName, description, eventDate, location]

-- Register alumni for event (avoid duplicate via UNIQUE constraint)
INSERT INTO EventRegistrations (AlumniID, EventID)
VALUES (?, ?);
-- params: [alumniId, eventId]

-- Get all event registrations for an alumni
SELECT er.RegistrationID, e.EventName, e.EventDate, e.Location, er.RegisteredAt
FROM EventRegistrations er
JOIN Events e ON er.EventID = e.EventID
WHERE er.AlumniID = ?;
-- params: [alumniId]

Job Postings
-- Post a job
INSERT INTO JobPostings (PostedByAlumniID, JobTitle, Description, Company, Location)
VALUES (?, ?, ?, ?, ?);
-- params: [alumniId, jobTitle, description, company, location]

-- List all jobs
SELECT JobID, JobTitle, Company, Location, PostedAt FROM JobPostings ORDER BY PostedAt DESC;

-- List jobs posted by a specific alumni
SELECT JobID, JobTitle, Company, Location, PostedAt FROM JobPostings WHERE PostedByAlumniID = ? ORDER BY PostedAt DESC;
-- params: [alumniId]

Announcements
-- Post an announcement
INSERT INTO Announcements (Title, Content)
VALUES (?, ?);
-- params: [title, content]

-- List recent announcements
SELECT AnnouncementID, Title, Content, PostedAt FROM Announcements ORDER BY PostedAt DESC LIMIT ?;
-- params: [limit]

Feedback and Contact Admin
-- Submit feedback
INSERT INTO Feedback (AlumniID, Message)
VALUES (?, ?);
-- params: [alumniId, message]

-- Contact Admin
INSERT INTO ContactAdmin (AlumniID, Message)
VALUES (?, ?);
-- params: [alumniId, message]

-- List all feedback by alumni
SELECT * FROM Feedback WHERE AlumniID = ? ORDER BY SentAt DESC;
-- params: [alumniId]

-- List all messages sent to admin by alumni
SELECT * FROM ContactAdmin WHERE AlumniID = ? ORDER BY SentAt DESC;
-- params: [alumniId]

Fund Requests and Mentorship
-- Submit a fund request
INSERT INTO FundRequests (StudentName, EventName, Description, RequestedAmount, AlumniID)
VALUES (?, ?, ?, ?, ?);
-- params: [studentName, eventName, description, requestedAmount, alumniIdOrNull]

-- Update FundRequest status
UPDATE FundRequests SET Status = ? WHERE RequestID = ?;
-- params: [status, requestId]

-- List pending fund requests
SELECT * FROM FundRequests WHERE Status = 'Pending' ORDER BY CreatedAt DESC;

-- Register mentorship relationship
INSERT INTO Mentorship (AlumniID, StudentID, StartDate, Topics)
VALUES (?, ?, ?, ?);
-- params: [alumniId, studentId, startDate, topics]

-- Get all mentorships for an alumni
SELECT * FROM Mentorship WHERE AlumniID = ? ORDER BY StartDate DESC;
-- params: [alumniId]

Advanced Directory Search
-- Search alumni by name, batch, course, or company (flexible search)
SELECT * FROM Alumni
WHERE (Name LIKE ? OR BatchYear LIKE ? OR Course LIKE ? OR CurrentJob LIKE ?);
-- params: [`%searchTerm%`, `%searchTerm%`, `%searchTerm%`, `%searchTerm%`]

